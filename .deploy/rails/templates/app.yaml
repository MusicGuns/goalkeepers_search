apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appName }}-rails
  labels:
    app: {{ .Values.appName }}
spec:
  ports:
    - port: 80
  selector:
    app: {{ .Values.appName }}
    tier: rails
---
{{- if .Values.app.activeStorage.enabled }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ .Values.appName }}-active-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.app.activeStorage.size }}
---
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-rails
  lables: {{ .Values.appName }}
spec:
  replicas: 1
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ .Values.appName }}
      tier: rails
  template:
    metadata:
      name: {{ .Values.appName }}-rails
      labels:
        app: {{ .Values.appName }}
        tier: rails
        date: "{{ now | unixEpoch }}"
    spec:
      {{- if .Values.app.activeStorage.enabled }}
      volumes:
      - name: {{ .Values.appName }}-active-storage
        persistentVolumeClaim:
          claimName: {{ .Values.appName }}-active-storage
      {{- end }}
      containers:
      - name: {{ .Values.appName }}-rails
        image: {{ .Values.app.image }}
        args: {{ .Values.app.args }}
        env:
        {{- include "app.env" . | nindent 8 }}
        - name: RAILS_LOG_TO_STDOUT
          value: "true"
        - name: RAILS_SERVE_STATIC_ASSETS
          value: "true"
        ports:
        - containerPort: 3000
        {{- if .Values.app.activeStorage.enabled }}
        volumeMounts:
        - mountPath: "/code/storage"
          name: {{ .Values.appName }}-active-storage
        {{- end }}
      - name: {{ .Values.appName }}-nginx
        image: {{ .Values.app.nginx.image }}
        ports:
        - containerPort: 80
